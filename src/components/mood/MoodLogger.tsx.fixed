import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { 
  Box, 
  Typography, 
  Button, 
  IconButton, 
  TextField, 
  Card,
  CardContent,
  SelectChangeEvent,
  Chip,
  Divider,
  Tooltip,
  Paper,
  Grid,
  alpha,
  Fade,
  Checkbox
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { 
  Close as CloseIcon, 
  Save as SaveIcon, 
  Lightbulb as TipIcon,
  WbSunny as MorningIcon,
  WbTwilight as AfternoonIcon,
  NightsStay as NightIcon,
  Brightness2 as EveningIcon,
  Today as FullDayIcon,
  AddCircleOutline as AddIcon
} from '@mui/icons-material';
import { useMood } from '../../context/MoodContext';
import { MoodType, TimeOfDay } from '../../types';

// Type declarations
type CheckboxChangeEvent = React.ChangeEvent<HTMLInputElement>;
type TextFieldChangeEvent = React.ChangeEvent<HTMLInputElement>;

interface MoodLoggerProps {
  initialDate?: Date | null;
  onSaveSuccess?: () => void;
}

// Modern 2025 Mood Tracker Component
const MoodLogger: React.FC<MoodLoggerProps> = ({ initialDate, onSaveSuccess }) => {
  const [date, setDate] = useState<Date | null>(initialDate || new Date());
  const [mood, setMood] = useState<MoodType>('Okay');
  const [notes, setNotes] = useState<string>('');
  const [timeOfDay, setTimeOfDay] = useState<TimeOfDay>('full-day');
  const [activities, setActivities] = useState<string[]>([]);
  const [customActivity, setCustomActivity] = useState<string>('');
  const [customActivities, setCustomActivities] = useState<string[]>([]);
  const [saveCustom, setSaveCustom] = useState<boolean>(false);
  const { addMoodEntry } = useMood();
  
  // Update date if initialDate prop changes
  useEffect(() => {
    if (initialDate) {
      setDate(initialDate);
    }
  }, [initialDate]);

  // Add useEffect to load saved custom activities from localStorage on mount
  useEffect(() => {
    const savedActivities = localStorage.getItem('customActivities');
    if (savedActivities) {
      setCustomActivities(JSON.parse(savedActivities));
    }
  }, []);

  // Modern flat mood icons with better visibility
  const moodOptions = [
    { 
      value: 'Very Bad', 
      color: '#e53935',
      gradient: 'linear-gradient(135deg, #e53935, #d32f2f)',
      description: "I'm feeling very low and struggling today"
    },
    { 
      value: 'Bad', 
      color: '#f57c00',
      gradient: 'linear-gradient(135deg, #f57c00, #ef6c00)',
      description: "I'm not feeling great today"
    },
    { 
      value: 'Okay', 
      color: '#ffc107',
      gradient: 'linear-gradient(135deg, #ffc107, #ffb300)',
      description: "I'm feeling neutral today"
    },
    { 
      value: 'Good', 
      color: '#43a047',
      gradient: 'linear-gradient(135deg, #43a047, #388e3c)',
      description: "I'm feeling pretty good today"
    },
    { 
      value: 'Very Good', 
      color: '#1e88e5',
      gradient: 'linear-gradient(135deg, #1e88e5, #1976d2)',
      description: "I'm feeling amazing today!"
    }
  ];

  // Time of day options with colors and icons
  const timeOptions = [
    { value: 'morning', label: 'Morning', icon: <MorningIcon />, color: '#FF9800' },
    { value: 'afternoon', label: 'Afternoon', icon: <AfternoonIcon />, color: '#2196F3' },
    { value: 'evening', label: 'Evening', icon: <EveningIcon />, color: '#673AB7' },
    { value: 'night', label: 'Night', icon: <NightIcon />, color: '#3F51B5' },
    { value: 'full-day', label: 'Full Day', icon: <FullDayIcon />, color: '#4CAF50' }
  ];

  // Find the selected mood option
  const selectedMood = moodOptions.find(option => option.value === mood) || moodOptions[2];
  
  // Find selected time option
  const selectedTime = timeOptions.find(option => option.value === timeOfDay) || timeOptions[4];

  // Predefined list of common activities
  const commonActivities = [
    'Exercise', 'Reading', 'Meditation', 'Social', 'Work', 'Family', 
    'Outdoors', 'Shopping', 'Cooking', 'Movies', 'Music', 'Gaming',
    'Studying', 'Cleaning', 'Travel', 'Sports', 'Art', 'Yoga'
  ];

  const handleTimeChange = (event: SelectChangeEvent<TimeOfDay>) => {
    setTimeOfDay(event.target.value as TimeOfDay);
  };

  const handleMoodChange = (newMood: string) => {
    setMood(newMood as MoodType);
  };

  // Add a function to save custom activities permanently
  const handleSaveCustomActivity = (activity: string) => {
    if (!customActivities.includes(activity)) {
      const updatedCustomActivities = [...customActivities, activity];
      setCustomActivities(updatedCustomActivities);
      localStorage.setItem('customActivities', JSON.stringify(updatedCustomActivities));
    }
  };

  // Modify the handleAddCustomActivity function to optionally save the activity
  const handleAddCustomActivity = () => {
    if (customActivity.trim() !== '' && !activities.includes(customActivity.trim())) {
      setActivities([...activities, customActivity.trim()]);
      
      // If saveCustom is true, permanently save the activity
      if (saveCustom) {
        handleSaveCustomActivity(customActivity.trim());
        setSaveCustom(false); // Reset after saving
      }
      
      setCustomActivity('');
    }
  };
  
  // Handle removing an activity
  const handleRemoveActivity = (activity: string) => {
    setActivities(activities.filter(a => a !== activity));
  };

  const handleSave = () => {
    if (date) {
      // Preserve the time portion if we're using initialDate
      const formattedDate = new Date(
        date.getFullYear(),
        date.getMonth(),
        date.getDate(),
        new Date().getHours(),
        new Date().getMinutes()
      );
      
      addMoodEntry({
        date: formattedDate.toISOString(),
        mood,
        notes,
        timeOfDay: timeOfDay,
        activities: activities.length > 0 ? activities : undefined
      });
      
      // Reset form
      setNotes('');
      setActivities([]);
      
      // Call the success callback if provided
      if (onSaveSuccess) {
        onSaveSuccess();
      }
    }
  };

  const handleClear = () => {
    setDate(initialDate || new Date());
    setMood('Okay');
    setNotes('');
    setTimeOfDay('full-day');
    setActivities([]);
    setCustomActivity('');
  };

  // Get appropriate suggestion based on mood
  const getMoodSuggestion = () => {
    switch(mood) {
      case 'Very Bad': 
        return "Consider a short mindfulness session or reaching out to someone you trust.";
      case 'Bad': 
        return "A brief walk or your favorite music might help lift your spirits.";
      case 'Okay': 
        return "This is a good time to focus on small wins and achievements.";
      case 'Good': 
        return "Reflect on what's working well for you today!";
      case 'Very Good': 
        return "Wonderful! What activities could you do to maintain this feeling?";
      default: 
        return "Take a moment to reflect on what influenced your mood today.";
    }
  };

  // Icon components for each mood
  const renderMoodIcon = (moodType: string, isSelected: boolean) => {
    const size = isSelected ? 48 : 40;
    
    switch(moodType) {
      case 'Very Bad':
        return (
          <svg width={size} height={size} viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="24" cy="24" r="20" stroke="currentColor" strokeWidth="2.5" fill="none" />
            <path d="M16 32C16 32 20 26 24 26C28 26 32 32 32 32" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" />
            <circle cx="16" cy="18" r="2.5" fill="currentColor" />
            <circle cx="32" cy="18" r="2.5" fill="currentColor" />
          </svg>
        );
      case 'Bad':
        return (
          <svg width={size} height={size} viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="24" cy="24" r="20" stroke="currentColor" strokeWidth="2.5" fill="none" />
            <path d="M14 30C14 30 19 28 24 28C29 28 34 30 34 30" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" />
            <circle cx="16" cy="18" r="2.5" fill="currentColor" />
            <circle cx="32" cy="18" r="2.5" fill="currentColor" />
          </svg>
        );
      case 'Okay':
        return (
          <svg width={size} height={size} viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="24" cy="24" r="20" stroke="currentColor" strokeWidth="2.5" fill="none" />
            <path d="M16 30H32" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" />
            <circle cx="16" cy="18" r="2.5" fill="currentColor" />
            <circle cx="32" cy="18" r="2.5" fill="currentColor" />
          </svg>
        );
      case 'Good':
        return (
          <svg width={size} height={size} viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="24" cy="24" r="20" stroke="currentColor" strokeWidth="2.5" fill="none" />
            <path d="M16 28C16 28 19 32 24 32C29 32 32 28 32 28" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" />
            <circle cx="16" cy="18" r="2.5" fill="currentColor" />
            <circle cx="32" cy="18" r="2.5" fill="currentColor" />
          </svg>
        );
      case 'Very Good':
        return (
          <svg width={size} height={size} viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="24" cy="24" r="20" stroke="currentColor" strokeWidth="2.5" fill="none" />
            <path d="M16 26C16 26 19 34 24 34C29 34 32 26 32 26" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" />
            <circle cx="16" cy="18" r="2.5" fill="currentColor" />
            <circle cx="32" cy="18" r="2.5" fill="currentColor" />
          </svg>
        );
      default:
        return null;
    }
  };

  return (
    <Paper
      elevation={0}
      sx={{
        borderRadius: 'var(--radius-2xl)',
        overflow: 'hidden',
        background: 'rgba(255, 255, 255, 0.95)',
        backdropFilter: 'blur(var(--blur-lg))',
        WebkitBackdropFilter: 'blur(var(--blur-lg))',
        border: '1px solid rgba(255, 255, 255, 0.6)',
        boxShadow: 'var(--shadow-xl)',
        minHeight: '100%',
        display: 'flex',
        flexDirection: 'column',
        position: 'relative',
        zIndex: 1,
        animation: 'fadeIn 0.3s ease-out'
      }}
    >
      {/* Animated background pattern */}
      <Box
        sx={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          opacity: 0.07,
          background: 'url("data:image/svg+xml,%3Csvg width=\'80\' height=\'80\' viewBox=\'0 0 80 80\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cg fill=\'none\' fill-rule=\'evenodd\'%3E%3Cg fill=\'%231e88e5\' fill-opacity=\'0.4\'%3E%3Cpath d=\'M50 50c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c0 5.523-4.477 10-10 10s-10-4.477-10-10 4.477-10 10-10zM10 10c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c0 5.523-4.477 10-10 10S0 25.523 0 20s4.477-10 10-10zm10 8c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm40 40c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8z\' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E")',
          zIndex: -1
        }}
      />

      <Box 
        sx={{ 
          p: { xs: 2.5, md: 3.5 },
          position: 'relative',
          zIndex: 1,
          flexGrow: 1,
          display: 'flex',
          flexDirection: 'column'
        }}
      >
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            height: '100%',
          }}
        >
          <Typography
            variant="h4"
            align="center"
            sx={{
              fontWeight: 800,
              fontSize: { xs: '1.5rem', sm: '1.75rem', md: '2rem' },
              mb: 3,
              background: 'linear-gradient(135deg, var(--color-primary), var(--color-secondary))',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text',
              textShadow: '0 2px 8px rgba(0, 0, 0, 0.05)',
              position: 'relative',
              letterSpacing: '-0.5px',
              '&::after': {
                content: '""',
                position: 'absolute',
                bottom: '-10px',
                left: '50%',
                transform: 'translateX(-50%)',
                width: '80px',
                height: '4px',
                borderRadius: 'var(--radius-full)',
                background: 'linear-gradient(90deg, var(--color-primary), var(--color-secondary))'
              }
            }}
          >
            How are you feeling today?
          </Typography>

          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 1 }}>
                Date
              </Typography>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <Box sx={{ position: 'relative' }}>
                  {/* Decorative orbital ring */}
                  <Box sx={{ 
                    position: 'absolute',
                    top: '-5px',
                    left: '-5px',
                    right: '-5px',
                    bottom: '-5px',
                    borderRadius: 'var(--radius-xl)',
                    border: '1px dashed rgba(var(--color-primary-rgb), 0.3)',
                    pointerEvents: 'none',
                    zIndex: 0,
                    animation: 'rotate 20s linear infinite',
                    '@keyframes rotate': {
                      '0%': { transform: 'rotate(0deg)' },
                      '100%': { transform: 'rotate(360deg)' }
                    }
                  }} />
                  
                  {/* Floating pulsing dot */}
                  <Box sx={{
                    position: 'absolute',
                    right: '10px',
                    top: '50%',
                    width: '6px',
                    height: '6px',
                    borderRadius: '50%',
                    background: 'var(--color-primary)',
                    transform: 'translateY(-50%)',
                    boxShadow: '0 0 8px var(--color-primary)',
                    zIndex: 2,
                    animation: 'pulse 2s ease-in-out infinite',
                    '@keyframes pulse': {
                      '0%': { opacity: 0.4, transform: 'translateY(-50%) scale(1)' },
                      '50%': { opacity: 0.8, transform: 'translateY(-50%) scale(1.5)' },
                      '100%': { opacity: 0.4, transform: 'translateY(-50%) scale(1)' }
                    }
                  }} />
                  
                  <DatePicker
                    label="Entry Date"
                    value={date}
                    onChange={(newDate) => setDate(newDate)}
                    slotProps={{ 
                      textField: { 
                        fullWidth: true,
                        variant: "outlined", 
                        sx: {
                          '& .MuiOutlinedInput-root': {
                            backdropFilter: 'blur(15px)',
                            WebkitBackdropFilter: 'blur(15px)',
                            borderRadius: 'var(--radius-xl)',
                            background: 'rgba(255,255,255,0.4)',
                            boxShadow: 'var(--shadow-sm)',
                            border: '1px solid rgba(255,255,255,0.8)',
                            transition: 'all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1)',
                            overflow: 'hidden',
                            '&:hover': {
                              boxShadow: 'var(--shadow-md)',
                              transform: 'translateY(-2px)',
                              background: 'rgba(255,255,255,0.6)'
                            },
                            '&.Mui-focused': {
                              boxShadow: '0 5px 20px rgba(var(--color-primary-rgb), 0.25)',
                              background: 'rgba(255,255,255,0.8)',
                              borderColor: 'rgba(var(--color-primary-rgb), 0.5)'
                            },
                            '& input': {
                              fontWeight: 500,
                              color: 'var(--color-text-dark)',
                              '&::placeholder': {
                                color: 'rgba(var(--color-text-dark-rgb), 0.5)'
                              }
                            },
                            '& .MuiInputAdornment-root .MuiButtonBase-root': {
                              color: 'var(--color-primary)'
                            }
                          }
                        }
                      },
                      popper: {
                        sx: {
                          '& .MuiPaper-root': {
                            borderRadius: 'var(--radius-xl)',
                            boxShadow: '0 10px 30px rgba(0,0,0,0.15)',
                            backdropFilter: 'blur(15px)',
                            WebkitBackdropFilter: 'blur(15px)',
                            background: 'rgba(255,255,255,0.95)',
                            border: '1px solid rgba(255,255,255,0.8)',
                            overflow: 'hidden',
                            '& .MuiPickersDay-root': {
                              borderRadius: '12px',
                              transition: 'all 0.2s ease',
                              '&.Mui-selected': {
                                background: 'var(--color-primary)',
                                boxShadow: '0 3px 10px rgba(var(--color-primary-rgb), 0.3)',
                                transform: 'scale(1.1)',
                                fontWeight: 600
                              },
                              '&:hover:not(.Mui-selected)': {
                                background: 'rgba(var(--color-primary-rgb), 0.1)'
                              },
                              '&.MuiPickersDay-today:not(.Mui-selected)': {
                                border: '2px solid var(--color-primary)',
                                color: 'var(--color-primary)',
                                fontWeight: 600
                              }
                            },
                            '& .MuiPickersDay-dayWithMargin': {
                              margin: '2px'
                            },
                            '& .MuiPickersCalendar-weekDayLabel': {
                              color: 'rgba(var(--color-text-dark-rgb), 0.6)'
                            },
                            '& .MuiPickersCalendarHeader-label': {
                              fontWeight: 600,
                              color: 'var(--color-text-dark)'
                            },
                            '& .MuiPickersCalendarHeader-switchViewIcon': {
                              color: 'var(--color-primary)'
                            }
                          }
                        }
                      }
                    }}
                  />
                </Box>
              </LocalizationProvider>
            </Grid>

            {/* Time of Day Selection */}
            <Grid item xs={12} md={6}>
              <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 1 }}>
                Time of Day
              </Typography>
              <Box
                sx={{
                  position: 'relative',
                  borderRadius: 'var(--radius-xl)',
                  border: '1px solid rgba(255,255,255,0.8)',
                  background: 'rgba(255,255,255,0.5)',
                  backdropFilter: 'blur(15px)',
                  WebkitBackdropFilter: 'blur(15px)',
                  padding: '4px',
                  boxShadow: 'var(--shadow-sm)',
                  transition: 'all 0.3s ease',
                  overflow: 'hidden',
                  '&:hover': {
                    boxShadow: 'var(--shadow-md)'
                  }
                }}
              >
                {/* Neural glow background effect */}
                <Box
                  sx={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    background: 'radial-gradient(circle at center, rgba(255,255,255,0.15), transparent 70%)',
                    opacity: 0.8,
                    zIndex: 0,
                  }}
                />
                
                {/* Time selection grid */}
                <Box 
                  sx={{ 
                    display: 'grid', 
                    gridTemplateColumns: { xs: '1fr 1fr', md: '1fr 1fr 1fr 1fr 1fr' },
                    gap: 1,
                    position: 'relative',
                    zIndex: 1,
                  }}
                >
                  {timeOptions.map((option) => (
                    <Box
                      key={option.value}
                      onClick={() => handleTimeChange({ target: { value: option.value } } as SelectChangeEvent<TimeOfDay>)}
                      sx={{
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        cursor: 'pointer',
                        padding: '12px 8px',
                        borderRadius: '16px',
                        transition: 'all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1)',
                        position: 'relative',
                        overflow: 'hidden',
                        boxShadow: timeOfDay === option.value ? '0 10px 25px -5px rgba(0,0,0,0.1)' : 'none',
                        transform: timeOfDay === option.value ? 'translateY(-4px) scale(1.02)' : 'scale(1)',
                        background: timeOfDay === option.value 
                          ? `linear-gradient(135deg, ${alpha(option.color, 0.3)}, ${alpha(option.color, 0.1)})`
                          : 'rgba(255,255,255,0.5)',
                        border: timeOfDay === option.value
                          ? `1px solid ${alpha(option.color, 0.5)}`
                          : '1px solid rgba(255,255,255,0.7)',
                        '&:hover': {
                          background: `linear-gradient(135deg, ${alpha(option.color, 0.2)}, ${alpha(option.color, 0.05)})`,
                          transform: 'translateY(-2px) scale(1.01)',
                          boxShadow: '0 8px 20px -5px rgba(0,0,0,0.1)',
                        }
                      }}
                    >
                      {/* Animated highlight effect */}
                      <Box
                        sx={{
                          position: 'absolute',
                          top: '-50%',
                          left: '-50%',
                          right: '-50%',
                          bottom: '-50%',
                          background: 'radial-gradient(circle at center, rgba(255,255,255,0.8), transparent 70%)',
                          opacity: timeOfDay === option.value ? 0.5 : 0,
                          transition: 'opacity 0.5s ease',
                          animation: timeOfDay === option.value ? 'pulse 2s infinite' : 'none',
                          '@keyframes pulse': {
                            '0%': { opacity: 0.3 },
                            '50%': { opacity: 0.5 },
                            '100%': { opacity: 0.3 },
                          },
                        }}
                      />
                      
                      {/* 3D-like icon container */}
                      <Box
                        sx={{
                          width: 52,
                          height: 52,
                          borderRadius: '50%',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          mb: 1.5,
                          background: timeOfDay === option.value
                            ? `linear-gradient(135deg, ${alpha(option.color, 0.7)}, ${alpha(option.color, 0.4)})`
                            : 'rgba(255,255,255,0.7)',
                          boxShadow: timeOfDay === option.value
                            ? `0 10px 20px ${alpha(option.color, 0.3)}`
                            : '0 5px 10px rgba(0,0,0,0.05)',
                          border: timeOfDay === option.value
                            ? `2px solid ${alpha(option.color, 0.8)}`
                            : '2px solid rgba(255,255,255,0.9)',
                          transform: timeOfDay === option.value ? 'translateY(-5px)' : 'translateY(0)',
                          transition: 'all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)',
                          '& .MuiSvgIcon-root': {
                            fontSize: '1.8rem',
                            color: timeOfDay === option.value ? 'white' : option.color,
                            filter: timeOfDay === option.value 
                              ? `drop-shadow(0 2px 4px ${alpha(option.color, 0.5)})`
                              : 'none',
                            transition: 'all 0.3s ease'
                          }
                        }}
                      >
                        {option.icon}
                      </Box>
                      
                      <Typography
                        variant="body2"
                        sx={{
                          fontWeight: timeOfDay === option.value ? 600 : 500,
                          fontSize: '0.85rem',
                          color: timeOfDay === option.value ? option.color : 'text.secondary',
                          textAlign: 'center',
                          transition: 'all 0.3s ease',
                          textShadow: timeOfDay === option.value ? '0 1px 2px rgba(0,0,0,0.1)' : 'none',
                          position: 'relative',
                          zIndex: 2
                        }}
                      >
                        {option.label}
                      </Typography>
                      
                      {/* Active indicator */}
                      {timeOfDay === option.value && (
                        <Box
                          sx={{
                            position: 'absolute',
                            bottom: '6px',
                            left: '50%',
                            transform: 'translateX(-50%)',
                            width: '6px',
                            height: '6px',
                            borderRadius: '50%',
                            background: option.color,
                            boxShadow: `0 0 8px ${option.color}`,
                          }}
                        />
                      )}
                    </Box>
                  ))}
                </Box>
              </Box>
            </Grid>
          </Grid>

          {/* Mood Selection */}
          <Grid container spacing={3} sx={{ mt: 0.5 }}>
            <Grid item xs={12}>
              <Box sx={{ mb: 0.5 }}>
                <Typography 
                  variant="subtitle1" 
                  sx={{ 
                    fontWeight: 600,
                    fontSize: '0.95rem',
                    mb: 2,
                    color: '#1e293b'
                  }}
                >
                  How would you describe your mood?
                </Typography>
                
                {/* New Mood Selector */}
                <Box 
                  sx={{ 
                    mb: 3, 
                    position: 'relative',
                    mx: 'auto',
                    maxWidth: '750px'
                  }}
                >
                  {/* Ambient background effect */}
                  <Box
                    sx={{
                      position: 'absolute',
                      top: '-30px',
                      left: '-30px',
                      right: '-30px',
                      bottom: '-30px',
                      background: `radial-gradient(circle at ${moodOptions.findIndex(option => option.value === mood) * 20 + 10}% 50%, rgba(var(--color-primary-rgb), 0.15), transparent 70%)`,
                      filter: 'blur(30px)',
                      opacity: 0.6,
                      zIndex: 0,
                      transition: 'background 0.5s ease',
                      pointerEvents: 'none',
                    }}
                  />
                  
                  {/* Neural network pattern backdrop */}
                  <Box
                    sx={{
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      right: 0,
                      bottom: 0,
                      opacity: 0.1,
                      backgroundImage: 'url("data:image/svg+xml,%3Csvg width=\'80\' height=\'80\' viewBox=\'0 0 80 80\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cg fill=\'%231e88e5\' fill-opacity=\'0.4\'%3E%3Cpath d=\'M50 50c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c0 5.523-4.477 10-10 10s-10-4.477-10-10 4.477-10 10-10zM10 10c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c0 5.523-4.477 10-10 10S0 25.523 0 20s4.477-10 10-10zm10 8c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm40 40c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8z\' /%3E%3C/g%3E%3C/svg%3E")',
                      zIndex: 0,
                      pointerEvents: 'none',
                    }}
                  />
                  
                  {/* Mood options */}
                  <Grid container spacing={1} sx={{ position: 'relative', zIndex: 1 }}>
                    {moodOptions.map((option, index) => (
                      <Grid item xs={12/5} key={option.value}>
                        <Tooltip 
                          title={option.description}
                          arrow
                          placement="top"
                          componentsProps={{
                            tooltip: {
                              sx: {
                                background: alpha(option.color, 0.95),
                                backdropFilter: 'blur(5px)',
                                border: `1px solid ${alpha(option.color, 0.3)}`,
                                borderRadius: '12px',
                                boxShadow: `0 8px 20px ${alpha(option.color, 0.3)}`,
                                fontWeight: 500,
                                padding: '10px 14px'
                              }
                            },
                            arrow: {
                              sx: {
                                color: alpha(option.color, 0.95)
                              }
                            }
                          }}
                        >
                          <Box
                            onClick={() => handleMoodChange(option.value)}
                            sx={{
                              display: 'flex',
                              flexDirection: 'column',
                              alignItems: 'center',
                              cursor: 'pointer',
                              p: 1.5,
                              borderRadius: '16px',
                              transition: 'all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)',
                              background: mood === option.value ? alpha(option.color, 0.12) : 'rgba(255,255,255,0.7)',
                              backdropFilter: 'blur(8px)',
                              WebkitBackdropFilter: 'blur(8px)',
                              border: mood === option.value ? `1px solid ${alpha(option.color, 0.3)}` : '1px solid rgba(255,255,255,0.8)',
                              transform: mood === option.value ? 'translateY(-8px)' : 'translateY(0)',
                              boxShadow: mood === option.value 
                                ? `0 15px 30px ${alpha(option.color, 0.2)}` 
                                : '0 5px 15px rgba(0,0,0,0.05)',
                              '&:hover': {
                                background: alpha(option.color, 0.1),
                                transform: 'translateY(-4px)',
                                boxShadow: `0 10px 25px ${alpha(option.color, 0.15)}`
                              },
                              position: 'relative',
                              overflow: 'hidden'
                            }}
                          >
                            {/* Radial glow effect */}
                            <Box
                              sx={{
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                right: 0,
                                bottom: 0,
                                background: `radial-gradient(circle at center, ${alpha(option.color, 0.15)}, transparent 80%)`,
                                opacity: mood === option.value ? 1 : 0,
                                transition: 'opacity 0.4s ease',
                                zIndex: 0
                              }}
                            />
                            
                            {/* Neural pulse animation when selected */}
                            {mood === option.value && (
                              <Box
                                sx={{
                                  position: 'absolute',
                                  top: '50%',
                                  left: '50%',
                                  width: '120%',
                                  height: '120%',
                                  borderRadius: '50%',
                                  transform: 'translate(-50%, -50%)',
                                  background: `radial-gradient(circle at center, ${alpha(option.color, 0.4)}, transparent 70%)`,
                                  opacity: 0.3,
                                  animation: 'pulse 2.5s infinite',
                                  '@keyframes pulse': {
                                    '0%': { transform: 'translate(-50%, -50%) scale(0.7)', opacity: 0.3 },
                                    '50%': { transform: 'translate(-50%, -50%) scale(1.1)', opacity: 0.5 },
                                    '100%': { transform: 'translate(-50%, -50%) scale(0.7)', opacity: 0.3 }
                                  },
                                  zIndex: 0
                                }}
                              />
                            )}
                            
                            <Box
                              sx={{
                                width: 64,
                                height: 64,
                                borderRadius: '50%',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                mb: 1.5,
                                background: option.gradient,
                                border: mood === option.value ? `2px solid ${option.color}` : '2px solid transparent',
                                boxShadow: mood === option.value 
                                  ? `0 0 20px ${alpha(option.color, 0.5)}, inset 0 0 10px ${alpha(option.color, 0.3)}` 
                                  : 'none',
                                transition: 'all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)',
                                transform: mood === option.value ? 'scale(1.2)' : 'scale(1)',
                                position: 'relative',
                                zIndex: 1,
                                '&::before': {
                                  content: '""',
                                  position: 'absolute',
                                  top: 0,
                                  left: 0,
                                  right: 0,
                                  bottom: 0,
                                  background: `linear-gradient(135deg, ${alpha('#ffffff', 0.8)}, ${alpha('#ffffff', 0)})`,
                                  borderRadius: '50%',
                                  opacity: 0.6,
                                  zIndex: 0
                                }
                              }}
                            >
                              {/* Mood Icons for each option */}
                              <Typography 
                                sx={{ 
                                  fontSize: 32, 
                                  filter: mood === option.value ? 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))' : 'none',
                                  transform: mood === option.value ? 'scale(1.1)' : 'scale(1)',
                                  transition: 'all 0.3s ease',
                                  zIndex: 1
                                }}
                              >
                                {index === 0 && <span>😢</span>}
                                {index === 1 && <span>😕</span>}
                                {index === 2 && <span>😐</span>}
                                {index === 3 && <span>🙂</span>}
                                {index === 4 && <span>😄</span>}
                              </Typography>
                            </Box>
                            
                            <Typography
                              variant="body2"
                              sx={{
                                fontWeight: mood === option.value ? 700 : 500,
                                fontSize: '0.85rem',
                                color: option.color,
                                textAlign: 'center',
                                transition: 'all 0.3s ease',
                                opacity: mood === option.value ? 1 : 0.85,
                                textShadow: mood === option.value ? `0 1px 2px ${alpha(option.color, 0.3)}` : 'none',
                                position: 'relative',
                                zIndex: 1
                              }}
                            >
                              {option.value}
                            </Typography>
                            
                            {/* Active indicator dot */}
                            {mood === option.value && (
                              <Box
                                sx={{
                                  position: 'absolute',
                                  bottom: '8px',
                                  left: '50%',
                                  transform: 'translateX(-50%)',
                                  width: '6px',
                                  height: '6px',
                                  borderRadius: '50%',
                                  background: option.color,
                                  boxShadow: `0 0 8px ${option.color}`,
                                  zIndex: 2
                                }}
                              />
                            )}
                          </Box>
                        </Tooltip>
                      </Grid>
                    ))}
                  </Grid>
                  
                  {/* Track line in the middle with enhanced styling */}
                  <Box
                    sx={{
                      position: 'absolute',
                      top: '36px',
                      left: '8%',
                      width: '84%',
                      height: '4px',
                      background: 'linear-gradient(to right, #e53935, #f57c00, #ffc107, #43a047, #1e88e5)',
                      borderRadius: '4px',
                      opacity: 0.3,
                      zIndex: 0,
                      boxShadow: '0 0 10px rgba(255,255,255,0.7)',
                      '&::before': {
                        content: '""',
                        position: 'absolute',
                        top: '-4px',
                        left: 0,
                        right: 0,
                        height: '12px',
                        background: 'linear-gradient(to right, #e53935, #f57c00, #ffc107, #43a047, #1e88e5)',
                        borderRadius: '6px',
                        filter: 'blur(8px)',
                        opacity: 0.15
                      }
                    }}
                  />
                  
                  {/* Enhanced current mood indicator */}
                  <Box
                    sx={{
                      position: 'absolute',
                      top: '30px',
                      left: `calc(${moodOptions.findIndex(option => option.value === mood) * 20 + 8}% + 10px)`,
                      width: '12px',
                      height: '12px',
                      borderRadius: '50%',
                      background: selectedMood.color,
                      boxShadow: `0 0 12px ${selectedMood.color}, 0 0 20px ${alpha(selectedMood.color, 0.5)}`,
                      zIndex: 2,
                      transition: 'left 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)',
                      animation: 'pulse-grow 2s infinite',
                      '@keyframes pulse-grow': {
                        '0%': { transform: 'scale(1)' },
                        '50%': { transform: 'scale(1.3)' },
                        '100%': { transform: 'scale(1)' }
                      }
                    }}
                  />
                </Box>

                {/* Mood Insight/Suggestion based on selected mood - always visible */}
                <Fade in={true} timeout={500}>
                  <Box 
                    sx={{ 
                      position: 'relative',
                      borderRadius: '18px',
                      overflow: 'hidden',
                      background: `linear-gradient(135deg, ${alpha(selectedMood.color, 0.08)} 0%, ${alpha(selectedMood.color, 0.05)} 100%)`,
                      backdropFilter: 'blur(8px)',
                      WebkitBackdropFilter: 'blur(8px)',
                      border: `1px solid ${alpha(selectedMood.color, 0.3)}`,
                      boxShadow: `0 10px 30px ${alpha(selectedMood.color, 0.1)}`,
                      p: 3,
                      my: 4,
                      display: 'flex',
                      flexDirection: { xs: 'column', sm: 'row' },
                      gap: 3,
                      alignItems: 'center',
                      transform: 'translateZ(0)',
                      transition: 'all 0.3s ease'
                    }}
                  >
                    {/* Neural network background pattern */}
                    <Box
                      sx={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        opacity: 0.06,
                        backgroundImage: "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.4'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3Cpath d='M6 5V0H5v5H0v1h5v94h1V6h94V5H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")",
                        zIndex: 0
                      }}
                    />
                    
                    {/* Animated gradient glow */}
                    <Box
                      sx={{
                        position: 'absolute',
                        top: '-100%',
                        left: '-100%',
                        right: '-100%',
                        bottom: '-100%',
                        background: `radial-gradient(circle at 50% 50%, ${alpha(selectedMood.color, 0.2)}, transparent 70%)`,
                        opacity: 0.5,
                        animation: 'rotate 15s linear infinite',
                        '@keyframes rotate': {
                          '0%': { transform: 'rotate(0deg)' },
                          '100%': { transform: 'rotate(360deg)' }
                        },
                        zIndex: 0
                      }}
                    />
                    
                    {/* 3D-like icon container */}
                    <Box 
                      sx={{ 
                        position: 'relative',
                        width: { xs: 60, sm: 70 },
                        height: { xs: 60, sm: 70 },
                        borderRadius: '20px',
                        background: `linear-gradient(135deg, ${alpha(selectedMood.color, 0.2)}, ${alpha(selectedMood.color, 0.1)})`,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        flexShrink: 0,
                        boxShadow: `0 10px 25px ${alpha(selectedMood.color, 0.25)}`,
                        border: `1px solid ${alpha(selectedMood.color, 0.3)}`,
                        transform: 'perspective(800px) rotateY(-10deg) rotateX(10deg)',
                        transition: 'all 0.4s ease',
                        '&:hover': {
                          transform: 'perspective(800px) rotateY(-5deg) rotateX(5deg) translateY(-5px)',
                          boxShadow: `0 15px 30px ${alpha(selectedMood.color, 0.3)}`
                        },
                        overflow: 'hidden',
                        zIndex: 1
                      }}
                    >
                      {/* Inner highlight */}
                      <Box
                        sx={{
                          position: 'absolute',
                          top: 0,
                          left: 0,
                          width: '150%',
                          height: '100%',
                          background: `linear-gradient(90deg, transparent, ${alpha('#ffffff', 0.2)}, transparent)`,
                          transform: 'skewX(-20deg) translateX(-150%)',
                          animation: 'shimmer 4s infinite',
                          '@keyframes shimmer': {
                            '0%': { transform: 'skewX(-20deg) translateX(-150%)' },
                            '50%': { transform: 'skewX(-20deg) translateX(150%)' },
                            '100%': { transform: 'skewX(-20deg) translateX(-150%)' }
                          }
                        }}
                      />
                      
                      <TipIcon sx={{ 
                        fontSize: { xs: 30, sm: 36 },
                        color: selectedMood.color,
                        animation: 'pulse-light 2s infinite',
                        '@keyframes pulse-light': {
                          '0%': { filter: `drop-shadow(0 0 3px ${alpha(selectedMood.color, 0.3)})` },
                          '50%': { filter: `drop-shadow(0 0 8px ${alpha(selectedMood.color, 0.6)})` },
                          '100%': { filter: `drop-shadow(0 0 3px ${alpha(selectedMood.color, 0.3)})` }
                        }
                      }} />
                    </Box>
                    
                    <Box sx={{ flex: 1, position: 'relative', zIndex: 1 }}>
                      <Typography 
                        variant="subtitle1" 
                        fontWeight="700" 
                        sx={{ 
                          color: selectedMood.color, 
                          fontSize: '1.1rem', 
                          mb: 0.5,
                          display: 'flex',
                          alignItems: 'center',
                          textShadow: `0 1px 2px ${alpha(selectedMood.color, 0.2)}`
                        }}
                      >
                        AI Mood Insight
                        <Box
                          component="span"
                          sx={{
                            display: 'inline-block',
                            width: 6,
                            height: 6,
                            borderRadius: '50%',
                            background: selectedMood.color,
                            ml: 1.5,
                            boxShadow: `0 0 6px ${selectedMood.color}`,
                            animation: 'blink 2s infinite',
                            '@keyframes blink': {
                              '0%': { opacity: 0.4 },
                              '50%': { opacity: 1 },
                              '100%': { opacity: 0.4 }
                            }
                          }}
                        />
                      </Typography>
                      
                      <Typography 
                        variant="body1"
                        sx={{ 
                          color: 'var(--color-text-dark)', 
                          fontWeight: 500,
                          fontSize: '0.95rem',
                          lineHeight: 1.6,
                          position: 'relative',
                          '&::after': {
                            content: '""',
                            position: 'absolute',
                            bottom: -8,
                            left: 0,
                            width: 40,
                            height: 3,
                            background: `linear-gradient(90deg, ${selectedMood.color}, transparent)`,
                            borderRadius: 1.5
                          }
                        }}
                      >
                        {getMoodSuggestion()}
                      </Typography>
                    </Box>
                  </Box>
                </Fade>
              </Box>
            </Grid>
          </Grid>

          {/* Activity Tags Section */}
          <Box sx={{ mt: 1 }}>
            <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 1.5 }}>
              Activities (optional)
            </Typography>
            
            <Box sx={{ mb: 2 }}>
              <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                <TextField
                  variant="outlined"
                  size="small"
                  placeholder="Add custom activity"
                  value={customActivity}
                  onChange={(e) => setCustomActivity(e.target.value)}
                  fullWidth
                  InputProps={{
                    sx: {
                      borderRadius: 'var(--radius-lg)',
                      background: 'rgba(255,255,255,0.6)',
                      backdropFilter: 'blur(10px)',
                      WebkitBackdropFilter: 'blur(10px)',
                      boxShadow: 'var(--shadow-sm)',
                      border: '1px solid rgba(255,255,255,0.7)',
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        background: 'rgba(255,255,255,0.8)',
                        boxShadow: 'var(--shadow-md)'
                      },
                      '&.Mui-focused': {
                        boxShadow: '0 0 0 3px rgba(var(--color-primary-rgb), 0.25)'
                      }
                    }
                  }}
                />
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Checkbox
                    checked={saveCustom}
                    onChange={(e) => setSaveCustom(e.target.checked)}
                    sx={{
                      color: 'var(--color-primary)',
                      '&.Mui-checked': {
                        color: 'var(--color-primary)',
                      }
                    }}
                  />
                  <Typography variant="body2" sx={{ whiteSpace: 'nowrap' }}>
                    Save
                  </Typography>
                </Box>
                <Button
                  variant="outlined"
                  startIcon={<AddIcon />}
                  onClick={handleAddCustomActivity}
                  sx={{
                    borderRadius: 'var(--radius-lg)',
                    borderColor: 'rgba(var(--color-primary-rgb), 0.5)',
                    color: 'var(--color-primary)',
                    whiteSpace: 'nowrap',
                    '&:hover': {
                      borderColor: 'var(--color-primary)',
                      background: 'rgba(var(--color-primary-rgb), 0.05)',
                    }
                  }}
                >
                  Add
                </Button>
              </Box>
              
              {/* Activity chips */}
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>
                {activities.map((activity) => (
                  <Chip
                    key={activity}
                    label={activity}
                    onDelete={() => handleRemoveActivity(activity)}
                    sx={{
                      borderRadius: 'var(--radius-lg)',
                      background: 'rgba(var(--color-primary-rgb), 0.1)',
                      backdropFilter: 'blur(10px)',
                      WebkitBackdropFilter: 'blur(10px)',
                      border: '1px solid rgba(var(--color-primary-rgb), 0.2)',
                      color: 'var(--color-primary)',
                      fontWeight: 500,
                      '&:hover': {
                        background: 'rgba(var(--color-primary-rgb), 0.15)'
                      }
                    }}
                  />
                ))}
              </Box>
              
              <Typography variant="subtitle2" sx={{ mb: 1, color: 'text.secondary', fontSize: '0.85rem' }}>
                Suggested Activities:
              </Typography>
              
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {[...commonActivities, ...customActivities]
                  .filter((activity) => !activities.includes(activity))
                  .slice(0, 15)
                  .map((activity) => (
                    <Chip
                      key={activity}
                      label={activity}
                      onClick={() => setActivities([...activities, activity])}
                      sx={{
                        borderRadius: 'var(--radius-lg)',
                        background: 'rgba(255,255,255,0.6)',
                        backdropFilter: 'blur(10px)',
                        WebkitBackdropFilter: 'blur(10px)',
                        border: '1px solid rgba(255,255,255,0.7)',
                        transition: 'all 0.2s ease',
                        '&:hover': {
                          background: 'rgba(255,255,255,0.8)',
                          boxShadow: 'var(--shadow-sm)',
                          borderColor: 'rgba(var(--color-primary-rgb), 0.3)'
                        }
                      }}
                    />
                  ))}
              </Box>
            </Box>
          </Box>

          {/* Notes TextArea */}
          <Box sx={{ mt: 2, mb: 4 }}>
            <Typography variant="subtitle1" fontWeight={600} sx={{ mb: 1 }}>
              Notes (optional)
            </Typography>
            <TextField
              multiline
              rows={4}
              fullWidth
              placeholder="How are you feeling today? Add any thoughts or reflections here..."
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              variant="outlined"
              InputProps={{
                sx: {
                  borderRadius: 'var(--radius-xl)',
                  background: 'rgba(255,255,255,0.6)',
                  backdropFilter: 'blur(10px)',
                  WebkitBackdropFilter: 'blur(10px)',
                  boxShadow: 'var(--shadow-sm)',
                  border: '1px solid rgba(255,255,255,0.7)',
                  transition: 'all 0.3s ease',
                  '&:hover': {
                    background: 'rgba(255,255,255,0.8)',
                    boxShadow: 'var(--shadow-md)'
                  },
                  '&.Mui-focused': {
                    boxShadow: '0 0 0 3px rgba(var(--color-primary-rgb), 0.25)'
                  }
                }
              }}
            />
          </Box>

          {/* Action Buttons */}
          <Box 
            sx={{ 
              display: 'flex', 
              justifyContent: 'space-between',
              mt: 'auto',
              pt: 2,
              gap: 2 
            }}
          >
            <Button
              variant="outlined"
              color="inherit"
              startIcon={<CloseIcon />}
              onClick={handleClear}
              sx={{
                py: 1.5,
                px: 3,
                borderRadius: 'var(--radius-md)',
                flex: 1,
                background: 'rgba(255,255,255,0.6)',
                backdropFilter: 'blur(10px)',
                WebkitBackdropFilter: 'blur(10px)',
                color: 'text.secondary',
                border: '1px solid rgba(0,0,0,0.1)',
                fontSize: '0.95rem',
                fontWeight: 600,
                '&:hover': {
                  borderWidth: '2px',
                }
              }}
            >
              Clear
            </Button>
            
            <Button
              variant="contained"
              color="primary"
              startIcon={<SaveIcon />}
              onClick={handleSave}
              sx={{
                py: 1.5,
                px: 3,
                borderRadius: 'var(--radius-md)',
                flex: 1,
                fontSize: '0.95rem',
                fontWeight: 600,
                boxShadow: 'var(--shadow-md)',
                '&:hover': {
                  boxShadow: 'var(--shadow-lg)',
                }
              }}
            >
              Save Mood Entry
            </Button>
          </Box>
        </Box>
      </Box>
    </Paper>
  );
};

export default MoodLogger; 